#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(std430, binding = 0) buffer positionBuffer
{
	vec4 position[];
};

layout(std430, binding = 1) buffer velocityBuffer
{
	vec4 velocity[];
};

layout(local_size_x = 2, local_size_y = 1, local_size_z = 1) in;

const float dt = 0.01;
const float g = 9.81;
const float mi = 0.00001;
const float mClick = 0.0001;
uniform vec2 click;
const float eps = 0.0001;

void main()
{
	uint gid = gl_GlobalInvocationID.x;

	vec3 pos = position[gid].xyz;
	vec3 vel = velocity[gid].xyz;
	vec3 resForce = vec3(0.0);

	for(int i = 0;i<position.length();i++){
		if(i != gid){
			vec3 tempPos = position[i].xyz;
			vec3 rij = tempPos - pos;
			vec3 tempForce = (mi * rij) / pow(sqrt(length(rij) + eps*eps),3);

			resForce += tempForce;
		}
	}

	resForce *= g * mi;

	vec3 riClick = vec3(click,0.0) - pos;
	//vec3 force = g * (mi*mClick) * (1.0/length(riClick)) * normalize(riClick);
	//Uncomment nex line if you want not only the particles in the calculation but the click too
	//resForce += g*mi*mClick * riClick / pow(sqrt(length(riClick) + eps*eps),3);
	//vec3 a = force/mi;
	vec3 a = resForce / mi;

	vel += a * dt;

	vec3 npos = pos + vel * dt;

	if(npos.x < -1.0 || npos.x > 1.0) vel.x = -vel.x;
	if(npos.y < -1.0 || npos.y > 1.0) vel.y = -vel.y;
	if(npos.z < -1.0 || npos.z > 1.0) vel.z = -vel.z;

	position[gid].xyz = npos;
	velocity[gid].xyz = vel;
}