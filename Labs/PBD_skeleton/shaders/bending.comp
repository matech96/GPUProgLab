#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_storage_buffer_object : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(std430, binding = 0) buffer positionBufferTmp
{
	vec4 tmpPos[];
};

layout(std430, binding = 1) buffer positionBuffer
{
	vec4 pos[];
};

layout(std430, binding = 2) buffer velocityBuffer
{
	vec4 vel[];
};

uniform int N;
uniform float sideBendWeight;
uniform float diagBendWeight;

vec3 lineProject(vec3 p0, vec3 p1, vec3 p2, bool side){
	float weight = side ? sideBendWeight : diagBendWeight;
	vec3 r = p2 - p1;
	vec3 rn = r / length(r);
	vec3 a = p0-p1;
	a -= a * rn * rn;
	return -weight * a;
}

void main()
{
	uint id = gl_GlobalInvocationID.x * N + gl_GlobalInvocationID.y;
	vec3 p0 = tmpPos[id].xyz;
	vec3 tmp0 = p0;
	if(gl_GlobalInvocationID.y != N-1 && gl_GlobalInvocationID.y != 0) tmp0 += lineProject(p0,tmpPos[id-1].xyz,tmpPos[id+1].xyz, true);
	if(gl_GlobalInvocationID.x != N-1 && gl_GlobalInvocationID.x != 0) tmp0 += lineProject(p0,tmpPos[id-N].xyz,tmpPos[id+N].xyz, true);
	if(gl_GlobalInvocationID.x != 0 && gl_GlobalInvocationID.x != N-1 && gl_GlobalInvocationID.y != N-1 && gl_GlobalInvocationID.y != 0){
		tmp0 += lineProject(p0,tmpPos[id-N-1].xyz,tmpPos[id+N+1].xyz, false);
		tmp0 += lineProject(p0,tmpPos[id-N+1].xyz,tmpPos[id+N-1].xyz, false);
	}
	tmpPos[id].xyz = tmp0;
}